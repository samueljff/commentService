// ============= CONFIGURA√á√ÉO SWAGGER PARA ALGACOMMENTS =============

// 1. SwaggerConfig.java - Configura√ß√£o personalizada
package com.fonseca.algacomments.commentService.common;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.servers.Server;
import io.swagger.v3.oas.models.tags.Tag;
import io.swagger.v3.oas.models.ExternalDocumentation;
import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.media.Schema;
import io.swagger.v3.oas.models.responses.ApiResponse;
import io.swagger.v3.oas.models.media.Content;
import io.swagger.v3.oas.models.media.MediaType;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

@Configuration
public class SwaggerConfig {

    @Value("${server.port:8080}")
    private String serverPort;

    @Bean
    public OpenAPI algaCommentsOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("AlgaComments - Comment Service API")
                        .version("1.0.0")
                        .description("""
                                ## API do Servi√ßo de Coment√°rios AlgaComments
                                
                                Este microservi√ßo √© respons√°vel por:
                                - **Cria√ß√£o de coment√°rios** com valida√ß√£o autom√°tica
                                - **Modera√ß√£o inteligente** via servi√ßo externo
                                - **Consulta paginada** de coment√°rios
                                - **Tratamento robusto de erros** e timeouts
                                
                                ### Fluxo de Cria√ß√£o:
                                1. Coment√°rio √© submetido via POST
                                2. Valida√ß√£o de campos obrigat√≥rios
                                3. Envio para servi√ßo de modera√ß√£o
                                4. Aprova√ß√£o/Rejei√ß√£o autom√°tica
                                5. Persist√™ncia no banco H2
                                
                                Desenvolvido durante o curso **EMS AlgaWorks**
                                """))
                .servers(List.of(
                        new Server()
                                .url("http://localhost:" + serverPort)
                                .description("üè† Ambiente Local - Comment Service"),
                        new Server()
                                .url("http://localhost:8081")
                                .description("üõ°Ô∏è Servi√ßo de Modera√ß√£o")))
                .tags(List.of(
                        new Tag()
                                .name("Comments")
                                .description("üó®Ô∏è Opera√ß√µes de gerenciamento de coment√°rios")
                                .externalDocs(new ExternalDocumentation()
                                        .description("Documenta√ß√£o do dom√≠nio")
                                        .url("https://docs.algacomments.com/comments")),
                        new Tag()
                                .name("Moderation")
                                .description("üõ°Ô∏è Sistema de modera√ß√£o autom√°tica"),
                        new Tag()
                                .name("Health")
                                .description("‚ù§Ô∏è Monitoramento e sa√∫de do servi√ßo")))
                .components(new Components()
                        .addResponses("BadRequest", new ApiResponse()
                                .description("Dados inv√°lidos ou campos obrigat√≥rios ausentes")
                                .content(new Content()
                                        .addMediaType("application/json", new MediaType()
                                                .schema(new Schema<>().$ref("#/components/schemas/ValidationErrorResponse")))))
                        .addResponses("NotFound", new ApiResponse()
                                .description("Coment√°rio n√£o encontrado")
                                .content(new Content()
                                        .addMediaType("application/json", new MediaType()
                                                .schema(new Schema<>().$ref("#/components/schemas/ErrorResponse")))))
                        .addResponses("UnprocessableEntity", new ApiResponse()
                                .description("Coment√°rio rejeitado pela modera√ß√£o")
                                .content(new Content()
                                        .addMediaType("application/json", new MediaType()
                                                .schema(new Schema<>().$ref("#/components/schemas/ErrorResponse")))))
                        .addResponses("GatewayTimeout", new ApiResponse()
                                .description("Timeout no servi√ßo de modera√ß√£o")
                                .content(new Content()
                                        .addMediaType("application/json", new MediaType()
                                                .schema(new Schema<>().$ref("#/components/schemas/ErrorResponse")))))
                );
    }
}
